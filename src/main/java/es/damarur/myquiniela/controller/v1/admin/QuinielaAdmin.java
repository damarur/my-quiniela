/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package es.damarur.myquiniela.controller.v1.admin;

import es.damarur.myquiniela.model.v1.admin.AdminQuinielaDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "quiniela", description = "Everything about Quinielas")
public interface QuinielaAdmin {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /quiniela : Add a new quiniela
     * Add a new quiniela
     *
     * @param adminQuinielaDTO Create a new quiniela (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 400)
     *         or Validation exception (status code 422)
     */
    @Operation(
        operationId = "addQuiniela",
        summary = "Add a new quiniela",
        description = "Add a new quiniela",
        tags = { "quiniela" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdminQuinielaDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "422", description = "Validation exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/quiniela",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AdminQuinielaDTO> addQuiniela(
        @Parameter(name = "AdminQuinielaDTO", description = "Create a new quiniela", required = true) @Valid @RequestBody AdminQuinielaDTO adminQuinielaDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date_time\" : \"date_time\", \"games\" : [ { \"result\" : \"result\", \"date_time\" : \"date_time\", \"local_team\" : { \"name\" : \"name\", \"id\" : 1 }, \"local_goals\" : 5, \"visitor_team\" : { \"name\" : \"name\", \"id\" : 1 }, \"visitor_goals\" : 5, \"order\" : 6 }, { \"result\" : \"result\", \"date_time\" : \"date_time\", \"local_team\" : { \"name\" : \"name\", \"id\" : 1 }, \"local_goals\" : 5, \"visitor_team\" : { \"name\" : \"name\", \"id\" : 1 }, \"visitor_goals\" : 5, \"order\" : 6 } ], \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /quiniela/{quinielaId} : Deletes a quiniela
     * delete a quiniela
     *
     * @param quinielaId ID of quiniela to return (required)
     * @return Invalid quiniela value (status code 400)
     */
    @Operation(
        operationId = "deleteQuiniela",
        summary = "Deletes a quiniela",
        description = "delete a quiniela",
        tags = { "quiniela" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid quiniela value")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/quiniela/{quinielaId}"
    )
    
    default ResponseEntity<Void> deleteQuiniela(
        @Parameter(name = "quinielaId", description = "ID of quiniela to return", required = true, in = ParameterIn.PATH) @PathVariable("quinielaId") Long quinielaId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /quiniela/{quinielaId} : Find quiniela by ID
     * Returns a single quiniela
     *
     * @param quinielaId ID of quiniela to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Quiniela not found (status code 404)
     */
    @Operation(
        operationId = "getQuinielaById",
        summary = "Find quiniela by ID",
        description = "Returns a single quiniela",
        tags = { "quiniela" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdminQuinielaDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Quiniela not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/quiniela/{quinielaId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AdminQuinielaDTO> getQuinielaById(
        @Parameter(name = "quinielaId", description = "ID of quiniela to return", required = true, in = ParameterIn.PATH) @PathVariable("quinielaId") Long quinielaId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date_time\" : \"date_time\", \"games\" : [ { \"result\" : \"result\", \"date_time\" : \"date_time\", \"local_team\" : { \"name\" : \"name\", \"id\" : 1 }, \"local_goals\" : 5, \"visitor_team\" : { \"name\" : \"name\", \"id\" : 1 }, \"visitor_goals\" : 5, \"order\" : 6 }, { \"result\" : \"result\", \"date_time\" : \"date_time\", \"local_team\" : { \"name\" : \"name\", \"id\" : 1 }, \"local_goals\" : 5, \"visitor_team\" : { \"name\" : \"name\", \"id\" : 1 }, \"visitor_goals\" : 5, \"order\" : 6 } ], \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /quiniela/{quinielaId} : Updates a quiniela
     * 
     *
     * @param quinielaId ID of quiniela to return (required)
     * @return Invalid input (status code 400)
     *         or Validation exception (status code 422)
     */
    @Operation(
        operationId = "updateQuiniela",
        summary = "Updates a quiniela",
        description = "",
        tags = { "quiniela" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "422", description = "Validation exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/quiniela/{quinielaId}"
    )
    
    default ResponseEntity<Void> updateQuiniela(
        @Parameter(name = "quinielaId", description = "ID of quiniela to return", required = true, in = ParameterIn.PATH) @PathVariable("quinielaId") Long quinielaId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
